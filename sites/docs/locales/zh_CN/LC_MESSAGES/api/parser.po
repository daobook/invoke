# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022 Jeff Forcier
# This file is distributed under the same license as the Invoke package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Invoke \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-12-26 10:41+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.16.0\n"

#: ../../api/parser.rst:3
msgid "``parser``"
msgstr ""

#: ../../api/parser.rst:5
msgid ""
"The command-line parsing framework is split up into a handful of sub-"
"modules:"
msgstr ""

#: ../../api/parser.rst:7
msgid "``parser.argument``"
msgstr ""

#: ../../api/parser.rst:8
msgid "``parser.context`` (not to be confused with the top level ``context``!)"
msgstr ""

#: ../../api/parser.rst:9
msgid "``parser.parser``"
msgstr ""

#: ../../api/parser.rst:11
msgid "API docs for all are below."
msgstr ""

#: invoke.parser.parser.ParseResult:1 of
msgid "List-like object with some extra parse-related attributes."
msgstr ""

#: invoke.parser.parser.ParseResult:3 of
msgid ""
"Specifically, a ``.remainder`` attribute, which is the string found after"
" a ``--`` in any parsed argv list; and an ``.unparsed`` attribute, a list"
" of tokens that were unable to be parsed."
msgstr ""

#: ../../../docstring invoke.parser.argument.Argument.__weakref__:1
#: invoke.parser.context.ParserContext.__weakref__:1
#: invoke.parser.parser.ParseResult.__weakref__:1
#: invoke.parser.parser.Parser.__weakref__:1 of
msgid "list of weak references to the object"
msgstr ""

#: invoke.parser.parser.Parser:1 of
msgid "Create parser conscious of ``contexts`` and optional ``initial`` context."
msgstr ""

#: invoke.parser.parser.Parser:3 of
msgid ""
"``contexts`` should be an iterable of ``Context`` instances which will be"
" searched when new context names are encountered during a parse. These "
"Contexts determine what flags may follow them, as well as whether given "
"flags take values."
msgstr ""

#: invoke.parser.parser.Parser:8 of
msgid ""
"``initial`` is optional and will be used to determine validity of "
"\"core\" options/flags at the start of the parse run, if any are "
"encountered."
msgstr ""

#: invoke.parser.parser.Parser:11 of
msgid ""
"``ignore_unknown`` determines what to do when contexts are found which do"
" not map to any members of ``contexts``. By default it is ``False``, "
"meaning any unknown contexts result in a parse error exception. If "
"``True``, encountering an unknown context halts parsing and populates the"
" return value's ``.unparsed`` attribute with the remaining parse tokens."
msgstr ""

#: invoke.parser.parser.Parser.parse_argv:1 of
msgid "Parse an argv-style token list ``argv``."
msgstr ""

#: invoke.parser.parser.Parser.parse_argv:3 of
msgid ""
"Returns a list (actually a subclass, `.ParseResult`) of `.ParserContext` "
"objects matching the order they were found in the ``argv`` and containing"
" `.Argument` objects with updated values based on any flags given."
msgstr ""

#: invoke.parser.parser.Parser.parse_argv:8 of
msgid "Assumes any program name has already been stripped out. Good::"
msgstr ""

#: invoke.parser.parser.Parser.parse_argv:12 of
msgid "Bad::"
msgstr ""

#: ../../api/parser.rst
msgid "参数"
msgstr ""

#: invoke.parser.parser.Parser.parse_argv:16 of
msgid "List of argument string tokens."
msgstr ""

#: ../../api/parser.rst
msgid "返回"
msgstr ""

#: invoke.parser.parser.Parser.parse_argv:17 of
msgid ""
"A `.ParseResult` (a ``list`` subclass containing some number of "
"`.ParserContext` objects)."
msgstr ""

#: invoke.parser.context.ParserContext:1 of
msgid "Parsing context with knowledge of flags & their format."
msgstr ""

#: invoke.parser.context.ParserContext:3 of
msgid "Generally associated with the core program or a task."
msgstr ""

#: invoke.parser.context.ParserContext:5 of
msgid ""
"When run through a parser, will also hold runtime values filled in by the"
" parser."
msgstr ""

#: invoke.parser.context.ParserContext.__init__:1 of
msgid "Create a new ``ParserContext`` named ``name``, with ``aliases``."
msgstr ""

#: invoke.parser.context.ParserContext.__init__:3 of
msgid ""
"``name`` is optional, and should be a string if given. It's used to tell "
"ParserContext objects apart, and for use in a Parser when determining "
"what chunk of input might belong to a given ParserContext."
msgstr ""

#: invoke.parser.context.ParserContext.__init__:7 of
msgid ""
"``aliases`` is also optional and should be an iterable containing "
"strings. Parsing will honor any aliases when trying to \"find\" a given "
"context in its input."
msgstr ""

#: invoke.parser.context.ParserContext.__init__:11 of
msgid ""
"May give one or more ``args``, which is a quick alternative to calling "
"``for arg in args: self.add_arg(arg)`` after initialization."
msgstr ""

#: invoke.parser.argument.Argument.__repr__:1
#: invoke.parser.context.ParserContext.__repr__:1 of
msgid "Return repr(self)."
msgstr ""

#: invoke.parser.context.ParserContext.add_arg:1 of
msgid "Adds given ``Argument`` (or constructor args for one) to this context."
msgstr ""

#: invoke.parser.context.ParserContext.add_arg:3 of
msgid "The Argument in question is added to the following dict attributes:"
msgstr ""

#: invoke.parser.context.ParserContext.add_arg:5 of
msgid ""
"``args``: \"normal\" access, i.e. the given names are directly exposed as"
" keys."
msgstr ""

#: invoke.parser.context.ParserContext.add_arg:7 of
msgid ""
"``flags``: \"flaglike\" access, i.e. the given names are translated into "
"CLI flags, e.g. ``\"foo\"`` is accessible via ``flags['--foo']``."
msgstr ""

#: invoke.parser.context.ParserContext.add_arg:9 of
msgid ""
"``inverse_flags``: similar to ``flags`` but containing only the "
"\"inverse\" versions of boolean flags which default to True. This allows "
"the parser to track e.g. ``--no-myflag`` and turn it into a False value "
"for the ``myflag`` Argument."
msgstr ""

#: invoke.parser.context.ParserContext.as_kwargs:1 of
msgid "This context's arguments' values keyed by their ``.name`` attribute."
msgstr ""

#: invoke.parser.context.ParserContext.as_kwargs:3 of
msgid ""
"Results in a dict suitable for use in Python contexts, where e.g. an arg "
"named ``foo-bar`` becomes accessible as ``foo_bar``."
msgstr ""

#: invoke.parser.context.ParserContext.flag_names:1 of
msgid "Similar to `help_tuples` but returns flag names only, no helpstrs."
msgstr ""

#: invoke.parser.context.ParserContext.flag_names:3 of
msgid "Specifically, all flag names, flattened, in rough order."
msgstr ""

#: invoke.parser.context.ParserContext.help_for:1 of
msgid "Return 2-tuple of ``(flag-spec, help-string)`` for given ``flag``."
msgstr ""

#: invoke.parser.context.ParserContext.help_tuples:1 of
msgid "Return sorted iterable of help tuples for all member Arguments."
msgstr ""

#: invoke.parser.context.ParserContext.help_tuples:3 of
msgid "Sorts like so:"
msgstr ""

#: invoke.parser.context.ParserContext.help_tuples:5 of
msgid "General sort is alphanumerically"
msgstr ""

#: invoke.parser.context.ParserContext.help_tuples:6 of
msgid "Short flags win over long flags"
msgstr ""

#: invoke.parser.context.ParserContext.help_tuples:7 of
msgid "Arguments with *only* long flags and *no* short flags will come first."
msgstr ""

#: invoke.parser.context.ParserContext.help_tuples:9 of
msgid ""
"When an Argument has multiple long or short flags, it will sort using the"
" most favorable (lowest alphabetically) candidate."
msgstr ""

#: invoke.parser.context.ParserContext.help_tuples:12 of
msgid "This will result in a help list like so::"
msgstr ""

#: invoke.parser.context.flag_key:1 of
msgid "Obtain useful key list-of-ints for sorting CLI flags."
msgstr ""

#: invoke.parser.argument.Argument:1 of
msgid "A command-line argument/flag."
msgstr ""

#: invoke.parser.argument.Argument:3 of
msgid ""
"Syntactic sugar for ``names=[<name>]``. Giving both ``name`` and "
"``names`` is invalid."
msgstr ""

#: invoke.parser.argument.Argument:6 of
msgid ""
"List of valid identifiers for this argument. For example, a \"help\" "
"argument may be defined with a name list of ``['-h', '--help']``."
msgstr ""

#: invoke.parser.argument.Argument:9 of
msgid ""
"Type factory & parser hint. E.g. ``int`` will turn the default text value"
" parsed, into a Python integer; and ``bool`` will tell the parser not to "
"expect an actual value but to treat the argument as a toggle/flag."
msgstr ""

#: invoke.parser.argument.Argument:14 of
msgid ""
"Default value made available to the parser if no value is given on the "
"command line."
msgstr ""

#: invoke.parser.argument.Argument:17 of
msgid "Help text, intended for use with ``--help``."
msgstr ""

#: invoke.parser.argument.Argument:19 of
msgid ""
"Whether or not this argument's value may be given positionally. When "
"``False`` (default) arguments must be explicitly named."
msgstr ""

#: invoke.parser.argument.Argument:22 of
msgid "Whether or not this (non-``bool``) argument requires a value."
msgstr ""

#: invoke.parser.argument.Argument:24 of
msgid ""
"Whether or not this (``int``) argument is to be incremented instead of "
"overwritten/assigned to."
msgstr ""

#: invoke.parser.argument.Argument:27 of
msgid ""
"A Python identifier/attribute friendly name, typically filled in with the"
" underscored version when ``name``/``names`` contain dashes."
msgstr ""

#: invoke.parser.argument.Argument.got_value:1 of
msgid "Returns whether the argument was ever given a (non-default) value."
msgstr ""

#: invoke.parser.argument.Argument.got_value:3 of
msgid ""
"For most argument kinds, this simply checks whether the internally stored"
" value is non-``None``; for others, such as ``list`` kinds, different "
"checks may be used."
msgstr ""

#: invoke.parser.argument.Argument.name:1 of
msgid "The canonical attribute-friendly name for this argument."
msgstr ""

#: invoke.parser.argument.Argument.name:3 of
msgid ""
"Will be ``attr_name`` (if given to constructor) or the first name in "
"``names`` otherwise."
msgstr ""

#: invoke.parser.argument.Argument.set_value:1 of
msgid "Actual explicit value-setting API call."
msgstr ""

#: invoke.parser.argument.Argument.set_value:3 of
msgid "Sets ``self.raw_value`` to ``value`` directly."
msgstr ""

#: invoke.parser.argument.Argument.set_value:5 of
msgid "Sets ``self.value`` to ``self.kind(value)``, unless:"
msgstr ""

#: invoke.parser.argument.Argument.set_value:7 of
msgid "``cast=False``, in which case the raw value is also used."
msgstr ""

#: invoke.parser.argument.Argument.set_value:8 of
msgid ""
"``self.kind==list``, in which case the value is appended to "
"``self.value`` instead of cast & overwritten."
msgstr ""

#: invoke.parser.argument.Argument.set_value:10 of
msgid ""
"``self.incrementable==True``, in which case the value is ignored and the "
"current (assumed int) value is simply incremented."
msgstr ""

