# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022 Jeff Forcier
# This file is distributed under the same license as the Invoke package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Invoke \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-01-27 16:23+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../concepts/testing.rst:5
msgid "Testing Invoke-using codebases"
msgstr ""

#: ../../concepts/testing.rst:7
msgid ""
"Strategies for testing codebases that use Invoke; some applicable to code"
" focused on CLI tasks, and others applicable to more generic/refactored "
"setups."
msgstr ""

#: ../../concepts/testing.rst:12
msgid "Subclass & modify Invoke 'internals'"
msgstr ""

#: ../../concepts/testing.rst:14
msgid ""
"A quick foreword: most users will find the subsequent approaches "
"suitable, but advanced users should note that Invoke has been designed so"
" it is itself easily testable. This means that in many cases, even "
"Invoke's \"internals\" are exposed as low/no-shared-responsibility, "
"publicly documented classes which can be subclassed and modified to "
"inject test-friendly values or mocks. Be sure to look over the :ref:`API "
"documentation <api>`!"
msgstr ""

#: ../../concepts/testing.rst:23
msgid "Use `.MockContext`"
msgstr ""

#: ../../concepts/testing.rst:25
msgid ""
"An instance of subclassing Invoke's public API for test purposes is our "
"own `.MockContext`. Codebases which revolve heavily around `.Context` "
"objects and their methods (most task-oriented code) will find it easy to "
"test by injecting `.MockContext` objects which have been instantiated to "
"yield partial `.Result` objects."
msgstr ""

#: ../../concepts/testing.rst:31
msgid "For example, take this task::"
msgstr ""

#: ../../concepts/testing.rst:43
msgid "An example of testing it with `.MockContext` could be the following::"
msgstr ""

#: ../../concepts/testing.rst:57
msgid "Putting the ``Mock`` in `.MockContext`"
msgstr ""

#: ../../concepts/testing.rst:59
msgid ""
"Starting in Invoke 1.5, `.MockContext` will attempt to import the "
"``mock`` library at instantiation time and wrap its methods within "
"``Mock`` objects. This lets you not only present realistic return values "
"to your code, but make test assertions about what commands your code is "
"running."
msgstr ""

#: ../../concepts/testing.rst:64
msgid ""
"Here's another \"platform sensitive\" task, being tested with the "
"assumption that the test environment has some flavor of ``mock`` "
"installed (here we'll pretend it's Python 3.6 or later, and also use some"
" f-strings for brevity)::"
msgstr ""

#: ../../concepts/testing.rst:79
msgid ""
"The test code (again, which presumes that eg ``MockContext.run`` is now a"
" ``Mock`` wrapper) relies primarily on 'last call' assertions "
"(``Mock.assert_called_with``) but you can of course use any ``Mock`` "
"methods you need. It also shows how you can set the mock context to "
"respond to multiple possible commands, using a dict value::"
msgstr ""

#: ../../concepts/testing.rst:107
msgid "Boolean mock results"
msgstr ""

#: ../../concepts/testing.rst:109
msgid ""
"You may have noticed the above example uses a handful of 'empty' "
"`.Result` objects; these stand in for \"succeeded, but otherwise had no "
"useful attributes\" command executions (as `.Result` defaults to an exit "
"code of ``0`` and empty strings for stdout/stderr)."
msgstr ""

#: ../../concepts/testing.rst:114
msgid ""
"This is relatively common - think \"interrogative\" commands where the "
"caller only cares for a boolean result, or times when a command is called"
" purely for its side effects. To support this, there's a shorthand in "
"`.MockContext`: passing ``True`` or ``False`` to stand in for otherwise "
"blank Results with exit codes of ``0`` or ``1`` respectively."
msgstr ""

#: ../../concepts/testing.rst:120
msgid "The example tests then look like this::"
msgstr ""

#: ../../concepts/testing.rst:144
msgid "String mock results"
msgstr ""

#: ../../concepts/testing.rst:146
msgid ""
"Another convenient shorthand is using string values, which are "
"interpreted to be the stdout of the resulting `.Result`. This only really"
" saves you from writing out the class itself (since ``stdout`` is the "
"first positional arg of `.Result`!) but \"command X results in stdout Y\""
" is a common enough use case that we implemented it anyway."
msgstr ""

#: ../../concepts/testing.rst:152
msgid "By example, let's modify an earlier example where we cared about stdout::"
msgstr ""

#: ../../concepts/testing.rst:165
msgid ""
"As with everything else in this document, this tactic can be applied to "
"iterators or mappings as well as individual values."
msgstr ""

#: ../../concepts/testing.rst:169
msgid "Regular expression command matching"
msgstr ""

#: ../../concepts/testing.rst:171
msgid ""
"The dict form of `.MockContext` kwarg can accept regular expression "
"objects as keys, in addition to strings; ideal for situations where you "
"either don't know the exact command being invoked, or simply don't need "
"or want to write out the entire thing."
msgstr ""

#: ../../concepts/testing.rst:176
msgid ""
"Imagine you're writing a function to run package management commands on a"
" few different Linux distros and you're trying to test its error "
"handling. You might want to set up a context that pretends any arbitrary "
"``apt`` or ``yum`` command fails, and ensure the function returns stderr "
"when it encounters a problem::"
msgstr ""

#: ../../concepts/testing.rst:197
msgid ""
"A bit contrived - there are a bunch of other ways to organize this exact "
"test code so you don't truly need the regex - but hopefully it's clear "
"that when you *do* need this flexibility, this is how you could go about "
"it."
msgstr ""

#: ../../concepts/testing.rst:202
msgid "Repeated results"
msgstr ""

#: ../../concepts/testing.rst:204
msgid ""
"By default, the values in these mock structures are consumed, causing "
"`.MockContext` to raise ``NotImplementedError`` afterwards (as it does "
"for any unexpected command executions). This was designed with the "
"assumption that most code under test will run a given command once."
msgstr ""

#: ../../concepts/testing.rst:209
msgid ""
"If your situation doesn't match this, give ``repeat=True`` to the "
"constructor, and you'll see values repeat indefinitely instead (or in "
"cycles, for iterables)."
msgstr ""

#: ../../concepts/testing.rst:215
msgid "Expect `Results <.Result>`"
msgstr ""

#: ../../concepts/testing.rst:217
msgid ""
"The core Invoke subprocess methods like `~.Context.run` all return "
"`.Result` objects - which (as seen above) can be readily instantiated by "
"themselves with only partial data (e.g. standard output, but no exit code"
" or standard error)."
msgstr ""

#: ../../concepts/testing.rst:221
msgid ""
"This means that well-organized code can be even easier to test and "
"doesn't require as much use of `.MockContext`."
msgstr ""

#: ../../concepts/testing.rst:224
msgid "An iteration on the initial `.MockContext`-using example above::"
msgstr ""

#: ../../concepts/testing.rst:239
msgid ""
"With the logic encapsulated in a subroutine, you can just unit test that "
"function by itself, deferring testing of the task or its context::"
msgstr ""

#: ../../concepts/testing.rst:253
msgid "Avoid mocking dependency code paths altogether"
msgstr ""

#: ../../concepts/testing.rst:255
msgid ""
"This is more of a general software engineering tactic, but the natural "
"endpoint of the above code examples would be where your primary logic "
"doesn't care about Invoke at all -- only about basic Python (or locally "
"defined) data types. This allows you to test logic in isolation and "
"either ignore testing the Invoke side of things, or write targeted tests "
"solely for where your code interfaces with Invoke."
msgstr ""

#: ../../concepts/testing.rst:262
msgid "Another minor tweak to the task code::"
msgstr ""

#: ../../concepts/testing.rst:277
msgid "And the tests::"
msgstr ""

